/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
 * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
 **/

package com.dynatrace.plugin.nginx;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.logging.Logger;

import org.json.JSONException;
import org.json.JSONObject;

import com.dynatrace.diagnostics.pdk.MonitorEnvironment;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.plugin.nginx.bookers.CachesBooker;
import com.dynatrace.plugin.nginx.bookers.ConnectionsBooker;
import com.dynatrace.plugin.nginx.bookers.RequestsBooker;
import com.dynatrace.plugin.nginx.bookers.SSLBooker;
import com.dynatrace.plugin.nginx.bookers.ServerZonesBooker;
import com.dynatrace.plugin.nginx.bookers.StreamBooker;
import com.dynatrace.plugin.nginx.bookers.UpstreamsBooker;
import com.dynatrace.plugin.nginx.calculator.CalculatorImpl;
import com.dynatrace.plugin.nginx.calculator.TimeFrameCalculator;
import com.dynatrace.plugin.nginx.dto.NginxStatus;
import com.dynatrace.plugin.nginx.utils.Storage;

public class NginxPlusMonitor implements com.dynatrace.diagnostics.pdk.Monitor {

	private final Storage<NginxStatus> nginxStatusStorage = new Storage<>();

	private final static Logger log = Logger.getLogger(NginxPlusMonitor.class.getName());

	@Override
	public Status setup(MonitorEnvironment env) throws Exception {
		return new Status();
	}

	@Override
	public Status execute(MonitorEnvironment env) throws Exception {
		NginxPlusMonitoringConnection connection;
		JSONObject jsonObject;
		try {
			connection = new NginxPlusMonitoringConnection("http", env.getHost().getAddress(), 80, env.getConfigString("StatusDataEndpoint"));
		} catch(MalformedURLException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorInternal);
			status.setShortMessage("URL creation failed");
			status.setMessage("MalformedURLException");
			status.setException(e);
			return status;
		} catch(IOException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorTargetService);
			status.setShortMessage("Url connection failed");
			status.setMessage("IOException");
			status.setException(e);
			return status;
		}

		try {
			jsonObject = connection.getStatusJson();
		} catch(IllegalArgumentException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorTargetService);
			status.setShortMessage("Invalid Content-type");
			status.setMessage("IllegalArgumentException");
			status.setException(e);
			return status;
		} catch(IOException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorTargetService);
			status.setShortMessage("Create input stream failed");
			status.setMessage("IOException");
			status.setException(e);
			return status;
		} catch(JSONException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorInternal);
			status.setShortMessage("URL creation failed");
			status.setMessage("JSONException");
			status.setException(e);
			return status;
		}

		NginxStatus nginxStatusDTO;

		try {
			nginxStatusDTO = new NginxStatus(jsonObject);
		} catch (JSONException e) {
			e.printStackTrace();
			Status status = new Status();
			status.setStatusCode(Status.StatusCode.ErrorInternalException);
			status.setShortMessage("Booker JSON exception");
			status.setMessage("JSONException");
			status.setException(e);
			return status;
		}

		// This is a temporary fix to scheduler logic
		try {
			if (!nginxStatusStorage.isEmpty()) {
				TimeFrameCalculator timeFrameCalculator = new TimeFrameCalculator();
				if (timeFrameCalculator.calculateTimeFrame(nginxStatusStorage.get(), nginxStatusDTO) < 1.0) {
					nginxStatusStorage.put(nginxStatusDTO);
					return new Status();
				}
			}
		} catch (Exception e) {
			log.info(e.toString());
		}

		CalculatorImpl calculator = new CalculatorImpl();
		if (nginxStatusStorage.isEmpty()) {
			calculator.calculate(nginxStatusDTO, nginxStatusDTO);
			nginxStatusStorage.put(nginxStatusDTO);
		} else {
			NginxStatus nginxStatusDTOPrev = nginxStatusStorage.get();
			calculator.calculate(nginxStatusDTOPrev, nginxStatusDTO);
			nginxStatusStorage.put(nginxStatusDTO);
		}

		ConnectionsBooker.book(nginxStatusDTO.getConnections(), env, calculator);
		SSLBooker.book(nginxStatusDTO.getSSL(), env, calculator);
		RequestsBooker.book(nginxStatusDTO.getRequests(), env, calculator);
		ServerZonesBooker.book(nginxStatusDTO.getServerZones(), env, calculator.getServerZonesCalculator());
		UpstreamsBooker.book(nginxStatusDTO.getUpstreams(), env, calculator.getUpstreamsCalculator());
		CachesBooker.book(nginxStatusDTO.getCaches(), env, calculator.getCachesCalculator());
		StreamBooker.book(nginxStatusDTO.getStream(), env, calculator.getStreamCalculator());
		return new Status();
	}

	@Override
	public void teardown(MonitorEnvironment env) throws Exception {
	}
}